name: Test and package code

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:
  workflow_call:
  merge_group:

env:
  PYTHON_VERSION: "3.12" # Needs to work with Tensorflow
  POETRY_VERSION: "1.8.3"

jobs:

  lint-notebooks:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
      - name: Get version
        run: |
      - name: Lint Python Notebooks
        run: make lint-notebooks

  lint-python:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Get version
        run: |
          git describe --tags | sed --regexp-extended 's/^v([0-9]+)(-([0-9]+))?.*/\1.post\3/; s/.post$//' > version
      - name: Upload version
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
      - name: Lint Python Sources (pylint)
        run: make pylint
      - name: Lint Python Sources (isort)
        run: make isort
      - name: Lint Python Sources (mypy)
        run: make mypy

  lint-bash:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
      - name: Lint Bash Sources (bashate)
        run: make bashate

  lint-ansible:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
      - name: Run ansible-lint
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        run: |
          poetry install --only dev
          echo "${ANSIBLE_VAULT_PASSWORD}" > .vault_pass
          ANSIBLE_VAULT_PASSWORD_FILE=.vault_pass poetry run ansible-lint -v scripts/configure-pi.yaml
          rm -f .vault_pass

  test-python:
    runs-on: ubuntu-24.04
    needs:
      - lint-python

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          set -e -u -x
          sudo apt install --yes --no-install-recommends inotify-tools
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
      - name: Run tests
        run: |
          make test

  build-python:
    runs-on: ubuntu-24.04
    needs:
      - test-python
      - lint-python

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: true
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry install
      - uses: actions/download-artifact@v4
        with:
          name: version
      - name: Get Python package version
        id: get_python_package_version
        run: |
          VERSION=$(cat version)
          echo "python_package_version=${VERSION}" >> "${GITHUB_OUTPUT}"
          echo "Setting version: ${VERSION}"
      - name: Update package version
        run: poetry version "${{ steps.get_python_package_version.outputs.python_package_version }}"
      - name: Build package
        run: make build
      - uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ steps.get_python_package_version.outputs.python_package_version }}
          path: dist/*

  build-snap:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            arch: amd64
          - os: ubuntu-24.04-arm
            arch: arm64
    needs:
      - test-python
      - lint-python
      - lint-bash

    steps:
      - name: Check container free disk space
        run: df --human-readable /
      - name: Get largest installed packages
        run: |
          dpkg-query --show --showformat='${Package;-50}\t${Installed-Size}\n' | \
            sort --human-numeric-sort --key 2 --reverse | \
            head --lines 20
      - name: Check disk allocation
        run: du --human-readable --max-depth 1 / 2> /dev/null | sort --human-numeric-sort
      - name: Check disk allocation
        run: du --human-readable --max-depth 1 /usr/local 2> /dev/null | sort --human-numeric-sort
      - name: Remove unnecessary packages on amd64
        run: |
          sudo apt-get remove --auto-remove --purge \
            azure-cli \
            microsoft-edge-stable \
            google-cloud-cli \
            google-chrome-stable \
            \*temurin\* \
            \*llvm\* \
            powershell \
            \*dotnet\* \
            firefox \
            \*jdk\* \
            \*g++\* \
            \*mysql\*
        if: ${{ matrix.os == 'ubuntu-22.04' }}
      - name: Get largest installed packages
        run: |
          dpkg-query --show --showformat='${Package;-50}\t${Installed-Size}\n' | \
            sort --human-numeric-sort --key 2 --reverse | \
            head --lines 20
      - name: Get installed snaps
        run: snap list
      - name: Check disk allocation
        run: du --human-readable --max-depth 1 / 2> /dev/null | sort --human-numeric-sort --reverse | head --lines 30
      - name: Check disk allocation (/usr)
        run: du --human-readable --max-depth 1 /usr 2> /dev/null | sort --human-numeric-sort --reverse | head --lines 30
      - name: Check disk allocation (/usr/local)
        run: du --human-readable --max-depth 1 /usr/local 2> /dev/null | sort --human-numeric-sort --reverse | head --lines 30
      - name: Check disk allocation (/opt)
        run: du --human-readable --max-depth 1 /opt 2> /dev/null | sort --human-numeric-sort --reverse | head --lines 30
      - name: Check container free disk space
        run: df --human-readable /
      - uses: actions/checkout@v4
      - name: Update models
        run: |
          git submodule set-url pumaguard-models https://github.com/PEEC-Nature-Youth-Group/pumaguard-models.git
          git submodule update --init --depth 1 pumaguard-models
      - name: Check container free disk space
        run: df --human-readable /
      - uses: actions/download-artifact@v4
        with:
          name: version
      - name: Get snap version
        id: get_snap_version
        run: |
          VERSION=$(cat version)
          echo "snap_version=${VERSION}" >> "${GITHUB_OUTPUT}"
          echo "Setting version: ${VERSION}"
      - name: Get module weights
        run: |
          git submodule update --init --depth 1 pumaguard-models
      - uses: snapcore/action-build@v1
        id: snap
      - uses: actions/upload-artifact@v4
        with:
          name: snap-${{ steps.get_snap_version.outputs.snap_version }}-${{ matrix.arch }}
          path: ${{ steps.snap.outputs.snap }}

  release:
    runs-on: ubuntu-24.04
    needs:
      - build-python
      - build-snap
      - lint-notebooks
      - functional-poetry
      - functional-snap
      - lint-ansible
      - verify-poetry
      - verify-snap
    permissions: write-all

    steps:
      - uses: actions/download-artifact@v4
      - name: Upload release artifacts
        run: |
          #!/bin/bash
          set -e -u -x
          RELEASE_ID=$(curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{ "tag_name": "${{ github.ref_name }}", "name": "Release ${{ github.ref_name }}", "generate_release_notes": true }' \
            | jq --raw-output '.id')
          for artifact in snap-*/*.snap python-package-*/*.whl; do
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -H "Content-Type: application/octet-stream" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}/assets?name=${artifact}" \
              --data-binary "@${artifact}"
          done
        if: ${{ github.ref_type == 'tag' }}

  functional-poetry:
    runs-on: ubuntu-24.04
    needs:
      - build-python

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
      - run: make functional-poetry

  functional-snap:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            arch: amd64
          - os: ubuntu-24.04-arm
            arch: arm64
    needs:
      - build-snap

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/download-artifact@v4
      - name: Ensure snapd
        run: sudo systemctl restart snapd.service
      - name: Install snap
        run: |
          set -e -u -x
          sudo snap install --dangerous ./snap-*/pumaguard*${{ matrix.arch }}*.snap
          sudo snap connect pumaguard:tensorflow pumaguard-tensorflow:tensorflow
          ls -lh /snap/pumaguard-tensorflow/current/lib/python3.12/site-packages/
          echo "ls /snap/pumaguard/current/pumaguard-tensorflow/" | sudo snap run --shell pumaguard
      - run: make functional-snap

  verify-poetry:
    runs-on: ubuntu-24.04
    needs:
      - build-python

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
      - run: make verify-poetry

  verify-snap:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            arch: amd64
          - os: ubuntu-24.04-arm
            arch: arm64
    needs:
      - build-snap

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/download-artifact@v4
      - name: Ensure snapd
        run: sudo systemctl restart snapd.service
      - name: Install snap
        run: |
          set -e -u -x
          sudo snap install --dangerous ./snap-*/pumaguard*${{ matrix.arch }}*.snap
          sudo snap connect pumaguard:tensorflow pumaguard-tensorflow:tensorflow
      - run: make verify-snap

  train-snap:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            arch: amd64
          - os: ubuntu-24.04-arm
            arch: arm64
    needs:
      - build-snap

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/download-artifact@v4
      - name: Ensure snapd
        run: sudo systemctl restart snapd.service
      - name: Install snap
        run: |
          set -e -u -x
          sudo snap install --dangerous ./snap-*/pumaguard*${{ matrix.arch }}*.snap
          sudo snap connect pumaguard:tensorflow pumaguard-tensorflow:tensorflow
      - run: make train

  publish-to-pypi:
    runs-on: ubuntu-24.04
    environment:
      name: pypi
      url: https://pypi.org/p/pumaguard
    permissions:
      id-token: write
    needs:
      - build-python
      - functional-poetry
      - verify-poetry
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/download-artifact@v4
      - run: |
          mv python-package* dist
          ls -lh dist
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
