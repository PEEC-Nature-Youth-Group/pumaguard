name: pumaguard
icon: pumaguard-logo-4-512-512.png
base: core24
adopt-info: pumaguard
license: Apache-2.0
source-code: https://github.com/PEEC-Nature-Youth-Group/pumaguard
website: https://pumaguard.rtfd.io/
grade: stable
confinement: strict
contact: nicolasbock@gmail.com

summary: PumaGuard is a machine-learning based Puma mitigation solution
description: |
  The goal of this project is to accurately classify images based on the
  presence of mountain lions. This can have applications in wildlife
  monitoring, research, and conservation efforts. The model is trained on a
  labeled dataset and validated using a separate set of images.

plugs:
  tensorflow:
    interface: content
    target: $SNAP/pumaguard-tensorflow
    default-provider: pumaguard-tensorflow

environment:
  TF_CPP_MIN_LOG_LEVEL: 3 # or any of {'0', '1', '2'}
  # TF_ENABLE_ONEDNN_OPTS: 0
  PUMAGUARD_MODEL_PATH: $SNAP/lib/python3.12/site-packages/pumaguard-models
  PUMAGUARD_SOUND_PATH: $SNAP/lib/python3.12/site-packages/pumaguard-sounds
  MPLCONFIGDIR: $SNAP_DATA/matplotlib
  PYTHONPATH: "$SNAP/pumaguard-tensorflow/lib/python3.12/site-packages:$SNAP/pumaguard-tensorflow/usr/lib/python3/dist-packages:$SNAP/lib/python3.12/site-packages"
  LD_LIBRARY_PATH: "$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR:$SNAP/pumaguard-tensorflow/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR:$SNAP_LIBRARY_PATH"
  MPG123_MODDIR: "$SNAP/usr/lib/$CRAFT_ARCH_TRIPLET_BUILD_FOR/mpg123"

apps:
  pumaguard:
    command: bin/snapcraft-preload $SNAP/bin/python3 $SNAP/bin/pumaguard
    completer: bin/bash-completions.sh
    plugs:
      - alsa
      - audio-playback
      - home
      - network
      - opengl
      - pulseaudio
      - removable-media
      - x11
  vsftpd:
    command: usr/sbin/vsftpd $SNAP/etc/vsftpd.conf
    daemon: simple
    plugs:
      - network-bind
  mpg123:
    command: usr/bin/mpg123
    plugs:
      - alsa
      - audio-playback
      - home
      - network
      - opengl
      - pulseaudio
      - x11
  playsound:
    command: bin/playsound
    plugs:
      - alsa
      - audio-playback
      - home
      - network
      - opengl
      - pulseaudio
      - x11

parts:
  snapcraft-preload:
    source: https://github.com/sergiusens/snapcraft-preload.git
    plugin: cmake
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/
    build-packages:
      - on amd64:
          - gcc-multilib
          - g++-multilib

  pumaguard:
    plugin: poetry
    source: .
    build-packages:
      - git
      - python3-pip
    override-pull: |
      set -e -u -x
      craftctl default
      VERSION=$(git describe --tags 2> /dev/null | sed --regexp-extended 's/^v([0-9]+)(-([0-9]+))?.*/\1.post\3/; s/.post$//') || VERSION='undefined'
      if [[ ${VERSION} == undefined ]] && [[ -f version ]]; then
        VERSION=$(cat version)
      fi
      craftctl set version="v${VERSION}"
      poetry version "${VERSION}"

      if [[ ${CRAFT_ARCH_BUILD_FOR} == xamd64 ]]; then
        poetry install --extras and-cuda
      else
        poetry install
      fi
    override-build: |
      craftctl default
      install --mode 0755 pumaguard/completions/pumaguard-completions.sh ${CRAFT_PART_INSTALL}/bin/bash-completions.sh
    stage:
      - lib/python3.12/site-packages/pumaguard*
      - bin

  inotify:
    plugin: nil
    stage-packages:
      - inotify-tools

  ftp:
    plugin: nil
    override-build: |
      craftctl default
      cat <<EOF > vsftpd.conf
      chroot_local_user=YES
      listen=YES
      listen_ipv6=NO
      chroot_local_user=YES
      EOF
      install --mode 0644 vsftpd.conf ${CRAFT_PART_INSTALL}/etc/vsftpd.conf
    stage-packages:
      - vsftpd

  sound:
    plugin: nil
    stage-packages:
      - mpg123
    override-build: |
      craftctl default
      ln --symbolic mpg123.bin ${CRAFT_PART_INSTALL}/usr/bin/mpg123
